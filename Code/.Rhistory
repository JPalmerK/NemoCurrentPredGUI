output$NL= aggregate(data=Sim2, NoiseLevel~hour, FUN = mean)[,2]
output$Detected =output$Detected /output$Nobs
output$truth =output$truth /output$Nobs
ggplot(output)+
geom_point(aes(hour, truth),color = 'blue')+
geom_point(aes(hour, Detected), color = 'red')+
geom_smooth((aes(hour, Detected)))+
geom_smooth((aes(hour, truth)))
modOrig = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
summary(modOrig)
mod.1 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.2 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12)+
Detected~s(NoiseLevel,bs = "cc", k = 12)+,
family = 'binomial')
#####
mod.2 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12)+
Detected~s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
mod.1 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.2 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
summary(mod.2)
summary(mod.1)
mod.3 = gam(data = Sim2.trimmed,
Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
summary(mod.3)
mod.3 = gam(data = Sim2.trimmed,
Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
summary(mod.3)
mod.4 = gam(data = Sim2.trimmed,
Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
summary(mod.4)
plot(mod.1)
plot(mod.2)
plot(mod.2, trans = inv.logit)
library(boot)
plot(mod.2, trans = inv.logit)
plot(mod.1, trans = inv.logit)
plot(mod.2, trans = inv.logit)
plot(mod.4, trans = inv.logit)
summary(mod.1)
summary(mod.2)
# Set the noise
Sim1=occTable
Sim1$NoiseLevel =80+((occTable$ModalTrend*35)+rnorm(nrow(occTable),0,2))
Sim1$SoundProduced = rbinom(nrow(occTable),1,occTable$DielTrand)
Sim2$SL= 170+rnorm(nrow(Sim1), 0,10)
Sim2$Rage = 2000*rbeta(nrow(Sim1), 2,1)
Sim2$RL = Sim2$SL-15*log10(Sim2$Rage)
Sim2$Detected = Sim2$SoundProduced*ifelse(Sim2$RL-Sim2$NoiseLevel>5,1,0)
Sim2$SNR = Sim2$SL-Sim2$NoiseLevel-15*log10(Sim2$Rage)
# simulate 20 days of detections
###################
# Sim2 Solutions
######################
mod.1 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
# Set the noise
Sim1=occTable
Sim1$NoiseLevel =80+((occTable$ModalTrend*35)+rnorm(nrow(occTable),0,2))
Sim1$SoundProduced = rbinom(nrow(occTable),1,occTable$DielTrand)
Sim1$SL= 170+rnorm(nrow(Sim1), 0,10)
Sim1$Rage = 2000*rbeta(nrow(Sim1), 2,1)
Sim1$RL = Sim2$SL-15*log10(Sim2$Rage)
Sim1$Detected = Sim1$SoundProduced*ifelse(Sim1$RL-Sim1$NoiseLevel>5,1,0)
Sim1$SNR = Sim1$SL-Sim1$NoiseLevel-15*log10(Sim1$Rage)
# simulate 20 days of detections
mod.1 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
plot(mod.1, trans = inv.logit)
plot(mod.2, trans = inv.logit)
mod.1 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.2 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
mod.3 = gam(data = Sim1.trimmed,
Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.4 = gam(data = Sim1.trimmed,
Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
Sim1$NoiseLevel =80+((occTable$ModalTrend*35)+rnorm(nrow(occTable),0,2))
Sim1$SoundProduced = rbinom(nrow(occTable),1,occTable$DielTrand)
Sim1$SL= 170+rnorm(nrow(Sim1), 0,10)
Sim1$Rage = 2000*rbeta(nrow(Sim1), 2,1)
Sim1$RL = Sim2$SL-15*log10(Sim2$Rage)
Sim1$Detected = Sim1$SoundProduced*ifelse(Sim1$RL-Sim1$NoiseLevel>5,1,0)
Sim1$SNR = Sim1$SL-Sim1$NoiseLevel-15*log10(Sim1$Rage)
Sim1.trimmed = Sim1[Sim1$NoiseLevel<110,]
# simulate 20 days of detections
###################
# Sim2 Solutions
######################
mod.1 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.2 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
mod.3 = gam(data = Sim1.trimmed,
Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.4 = gam(data = Sim1.trimmed,
Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
plot(mod.2, trans = inv.logit)
plot(mod.3, trans = inv.logit)
plot(mod.4, trans = inv.logit)
load("C:/Users/Kaitlin Palmer/OneDrive - SOI Group Limited/KJP/MEPS Diel Trends Paper/DielTrendsWorkspace.RData")
View(aggdata_hour)
View(aggdata_tide)
View(CPOD_obs)
View(CPOD_preds)
load("C:/Users/Kaitlin Palmer/OneDrive - SOI Group Limited/KJP/ThiesisReAnalysis/OccupancyModelling.RData")
rm(list=ls())
load("C:/Users/Kaitlin Palmer/OneDrive - SOI Group Limited/KJP/ThiesisReAnalysis/OccupancyModelling.RData")
View(OccTable)
View(OccTable_SM)
dataAgg = aggregate(data=OccTable_SM, MedianNoiseLevel~ UnitLocFactor+Hr, FUN = mean)
dataAgg = aggregate(data=OccTable_SM, MedianNoiseLevel~ UniLocFactor+Hr, FUN = mean)
View(dataAgg)
library(ggplot2)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))+facet_grid(UnitLocFactor)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))+facet_grid(~UnitLocFactor)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))+facet_wrap(~UnitLocFactor)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))+facet_wrap(~UnitLocFactor)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))
ggplot(dataAgg)
dev.off()
ggplot(dataAgg)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))+facet_wrap(~UnitLocFactor)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel))
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel,color=UniLocFactor))+facet_grid()
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel,color=UniLocFactor))+facet_grid(~UniLocFactor)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel,color=UniLocFactor))+facet_grid(~UniLocFactor, nrow=3)
ggplot(dataAgg)+geom_point(aes(Hr, MedianNoiseLevel,color=UniLocFactor))+facet_wrap(~UniLocFactor, nrow=3)
dataAgg = aggregate(data=OccTable_SM, MedianNoiseLevel~ UniLocFactor+Hr, FUN = median)
dataAgg = aggregate(data=OccTable_SM, MedianNoiseLevel~ UniLocFactor+Hr, FUN = median)
rm(list=ls())
require(mgcv)
library(ggplot2)
## create some x's and knots...
n <- 24
x <- 0:(n-1)/(n-1);
k<- 0:6/6
X <- cSplineDes(x,k) ## cyclic spline design matrix
## plot evaluated basis functions...
plot(x,X[,2],type="l") # this is our underlying probabiliyt of detection throughout the day
occTable = expand.grid(day=1:50,
hour=0:(n-1)/(n-1))
occTable$dayHour = occTable$day+occTable$hour
occTable$DielTrand= cSplineDes(occTable$hour, k)[,2]
occTable$ModalTrend=  0.5*(1+cos(2*pi*occTable$hour+pi))
#############################################################
## Simulation one - modal noise and diel sound production##
############################################################
# Set the noise
Sim1=occTable
Sim1$NoiseLevel =80+((occTable$ModalTrend*35)+rnorm(nrow(occTable),0,2))
Sim1$SoundProduced = rbinom(nrow(occTable),1,occTable$DielTrand)
Sim1$SL= 170+rnorm(nrow(Sim1), 0,10)
Sim1$Rage = 2000*rbeta(nrow(Sim1), 2,1)
Sim1$RL = Sim2$SL-15*log10(Sim2$Rage)
Sim1$Detected = Sim1$SoundProduced*ifelse(Sim1$RL-Sim1$NoiseLevel>5,1,0)
Sim1$SNR = Sim1$SL-Sim1$NoiseLevel-15*log10(Sim1$Rage)
Sim1.trimmed = Sim1[Sim1$NoiseLevel<110,]
# simulate 20 days of detections
###################
# Sim2 Solutions
######################
mod.1 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.2 = gam(data = Sim1, Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
mod.3 = gam(data = Sim1.trimmed,
Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.4 = gam(data = Sim1.trimmed,
Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
#############################################################
## Simulation two - modal noise and uniform sound production##
#############################################################
# Set the noise
Sim2=occTable
Sim2$NoiseLevel = 80+((occTable$ModalTrend*35)+rnorm(nrow(occTable),0,2))
Sim2$SoundProduced = rbinom(nrow(occTable),1,.5)
Sim2$SL= 170+rnorm(nrow(Sim1), 0,10)
Sim2$Rage = 2000*rbeta(nrow(Sim1), 2,1)
Sim2$RL = Sim2$SL-15*log10(Sim2$Rage)
Sim2$Detected = Sim2$SoundProduced*ifelse(Sim2$RL-Sim2$NoiseLevel>5,1,0)
Sim2$SNR = Sim2$SL-Sim2$NoiseLevel-15*log10(Sim2$Rage)
# simulate 20 days of detections
# Look for a solution
output$Detected = aggregate(data=Sim2, Detected~hour, FUN = sum)[,2]
output$Nobs = aggregate(data=Sim2, Detected~hour, FUN = length)[,2]
output$truth = aggregate(data=Sim2, SoundProduced~hour, FUN = sum)[,2]
output$NL= aggregate(data=Sim2, NoiseLevel~hour, FUN = mean)[,2]
output$Detected =output$Detected /output$Nobs
output$truth =output$truth /output$Nobs
ggplot(output)+
geom_point(aes(hour, truth),color = 'blue')+
geom_point(aes(hour, Detected), color = 'red')+
geom_smooth((aes(hour, Detected)))+
geom_smooth((aes(hour, truth)))
######################################
# Look for a solution
######################################
Sim2.trimmed = Sim2[Sim2$NoiseLevel<110,]
output1$Detected = aggregate(data=Sim2.trimmed, Detected~hour, FUN = sum)[,2]
output1$Nobs = aggregate(data=Sim2.trimmed, Detected~hour, FUN = length)[,2]
output1$truth = aggregate(data=Sim2.trimmed, SoundProduced~hour, FUN = sum)[,2]
output1$NL= aggregate(data=Sim2.trimmed, NoiseLevel~hour, FUN = mean)[,2]
output1$Detected =output1$Detected /output1$Nobs
output1$truth =output1$truth /output1$Nobs
ggplot(output1)+
geom_point(aes(hour, truth),color = 'blue')+
geom_point(aes(hour, Detected), color = 'red')+
geom_smooth((aes(hour, Detected)))+
geom_smooth((aes(hour, truth)))
###################
# Sim2 Solutions
######################
mod.1 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.2 = gam(data = Sim2, Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
mod.3 = gam(data = Sim2.trimmed,
Detected~s(hour,bs = "cc", k = 12),
family = 'binomial')
mod.4 = gam(data = Sim2.trimmed,
Detected~s(hour,bs = "cc", k = 12)+
s(NoiseLevel,bs = "cc", k = 12),
family = 'binomial')
occTable = expand.grid(day=1:50,
hour=0:(n-1)/(n-1),
site=1:3)
occTable$CallsProduced=0
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 90, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 85, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 90, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 85, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$RL = occTable$SL-15*log10(Sim2$Rage)
occTable$Detected = occTable$SoundProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Rage
occTable = expand.grid(day=1:50,
hour=0:(n-1)/(n-1),
site=1:3)
occTable$dayHour = occTable$day+occTable$hour
occTable$NoiseLevel =0
occTable$SL= 170+rnorm(nrow(occTable), 0,10)
occTable$Rage = 2000*rbeta(nrow(occTable), 2,1)
occTable$RL = Sim2$SL-15*log10(occTable$Rage)
occTable$CallsProduced=0
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .5)
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .3)
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .2)
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 90, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 85, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Detected = occTable$SoundProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Detected = occTable$CallsProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
table(occTable)
table(occTable$Detected)
aggregate(data = occTable, Detected ~ Site)
aggregate(data = occTable, Detected ~ Site, FUN =mean)
aggregate(data = occTable, Detected ~ site, FUN =mean)
occTable$CallsProduced=0
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .6)
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .5)
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .4)
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 90, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 85, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Detected = occTable$CallsProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
aggregate(data = occTable, Detected ~ site, FUN =mean)
aggregate(data = occTable, NoiseLevel ~ site, FUN =mean)
occTable$CallsProduced=0
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .7)
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .6)
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .5)
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 90, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 85, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Detected = occTable$CallsProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
aggregate(data = occTable, NoiseLevel ~ site, FUN =mean)
aggregate(data = occTable, Detected ~ site, FUN =mean)
View(occTable)
aggregate(data = occTable, Detected ~ site, FUN =sum)
occTable$CallsProduced=0
occTable$CallsProduced[occTable$site==1] =
rbinom(sum(occTable$site==1), 1, .7)
occTable$CallsProduced[occTable$site==2] =
rbinom(sum(occTable$site==1), 1, .6)
occTable$CallsProduced[occTable$site==3] =
rbinom(sum(occTable$site==1), 1, .5)
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 90, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 85, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Detected = occTable$CallsProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
aggregate(data = occTable, Detected ~ site, FUN =sum)
aggregate(data = occTable, Detected ~ site, FUN =mean)
occTable$NoiseLevel[occTable$site==1] = rnorm(sum(occTable$site==1), 100, 5)
occTable$NoiseLevel[occTable$site==2] = rnorm(sum(occTable$site==2), 90, 5)
occTable$NoiseLevel[occTable$site==3] = rnorm(sum(occTable$site==3), 80, 5)
occTable$RL = occTable$SL-15*log10(occTable$Rage)
occTable$Detected = occTable$CallsProduced*
ifelse(occTable$RL-occTable$NoiseLevel>5,1,0)
aggregate(data = occTable, Detected ~ site, FUN =mean)
# Load the actual data
SLtable = read.csv(
'C:\\BitBucketRepositories\\CABOWProcessing\\ProcessedCSVfiles\\MDTrials.csv')
SLtable$Run =as.factor('Field')
# load the revised table
SLtableRevised = read.csv('C:\\BitBucketRepositories\\CABOWProcessing\\ProcessedCSVfiles\\MDtrialsRevision321.csv')
SLtableRevised$Run = as.factor('Revised')
SLtable=rbind(SLtable, SLtableRevised)
rm(SLtableRevised)
# Pdet vs SNR
SLtable$SNR =SLtable$RecRMSsignal-SLtable$RecRMSnoise
DistBreak = seq(0, 10000, by=500)
SNRbreaks = seq(floor(min(SLtable$SNR, na.rm = TRUE)),
ceiling(max(SLtable$SNR, na.rm = TRUE)),by = 1)
## Bin the results
SLtable$SNRbin = cut(as.numeric(SLtable$SNR),
breaks=SNRbreaks,
include.lowest=TRUE,
right=FALSE)
SNRden = aggregate(data = SLtable,
detected~SNRbin+Run, FUN =mean)
SNRden$Nobs = aggregate(data = SLtable,
detected~SNRbin+Run, FUN =length)[3]
SNRden$SNRBinNumeric =SNRbreaks[as.numeric(SNRden$SNRbin)]
SNRfield<-ggplot(SNRden[SNRden$Run=='Revised',],
aes(x = SNRBinNumeric,
y = detected, shape=Run, color=Run)) +
geom_point(size=2)+
theme_bw()+
#stat_smooth(span = .8)+
scale_color_manual(values = wes_palette("Royal1", 2))+
ylab('Proportion Detected')+
xlab('SNR')
library(ggplot2)
# Load the actual data
SLtable = read.csv(
'C:\\BitBucketRepositories\\CABOWProcessing\\ProcessedCSVfiles\\MDTrials.csv')
SLtable$Run =as.factor('Field')
# load the revised table
SLtableRevised = read.csv('C:\\BitBucketRepositories\\CABOWProcessing\\ProcessedCSVfiles\\MDtrialsRevision321.csv')
SLtableRevised$Run = as.factor('Revised')
SLtable=rbind(SLtable, SLtableRevised)
rm(SLtableRevised)
# Pdet vs SNR
SLtable$SNR =SLtable$RecRMSsignal-SLtable$RecRMSnoise
DistBreak = seq(0, 10000, by=500)
SNRbreaks = seq(floor(min(SLtable$SNR, na.rm = TRUE)),
ceiling(max(SLtable$SNR, na.rm = TRUE)),by = 1)
## Bin the results
SLtable$SNRbin = cut(as.numeric(SLtable$SNR),
breaks=SNRbreaks,
include.lowest=TRUE,
right=FALSE)
SNRden = aggregate(data = SLtable,
detected~SNRbin+Run, FUN =mean)
SNRden$Nobs = aggregate(data = SLtable,
detected~SNRbin+Run, FUN =length)[3]
SNRden$SNRBinNumeric =SNRbreaks[as.numeric(SNRden$SNRbin)]
SNRfield<-ggplot(SNRden[SNRden$Run=='Revised',],
aes(x = SNRBinNumeric,
y = detected, shape=Run, color=Run)) +
geom_point(size=2)+
theme_bw()+
#stat_smooth(span = .8)+
scale_color_manual(values = wes_palette("Royal1", 2))+
ylab('Proportion Detected')+
xlab('SNR')
library(ggplot2)
library(wesanderson)
# Load the actual data
SLtable = read.csv(
'C:\\BitBucketRepositories\\CABOWProcessing\\ProcessedCSVfiles\\MDTrials.csv')
SLtable$Run =as.factor('Field')
# load the revised table
SLtableRevised = read.csv('C:\\BitBucketRepositories\\CABOWProcessing\\ProcessedCSVfiles\\MDtrialsRevision321.csv')
SLtableRevised$Run = as.factor('Revised')
SLtable=rbind(SLtable, SLtableRevised)
rm(SLtableRevised)
# Pdet vs SNR
SLtable$SNR =SLtable$RecRMSsignal-SLtable$RecRMSnoise
DistBreak = seq(0, 10000, by=500)
SNRbreaks = seq(floor(min(SLtable$SNR, na.rm = TRUE)),
ceiling(max(SLtable$SNR, na.rm = TRUE)),by = 1)
## Bin the results
SLtable$SNRbin = cut(as.numeric(SLtable$SNR),
breaks=SNRbreaks,
include.lowest=TRUE,
right=FALSE)
SNRden = aggregate(data = SLtable,
detected~SNRbin+Run, FUN =mean)
SNRden$Nobs = aggregate(data = SLtable,
detected~SNRbin+Run, FUN =length)[3]
SNRden$SNRBinNumeric =SNRbreaks[as.numeric(SNRden$SNRbin)]
SNRfield<-ggplot(SNRden[SNRden$Run=='Revised',],
aes(x = SNRBinNumeric,
y = detected, shape=Run, color=Run)) +
geom_point(size=2)+
theme_bw()+
#stat_smooth(span = .8)+
scale_color_manual(values = wes_palette("Royal1", 2))+
ylab('Proportion Detected')+
xlab('SNR')
SNRfield
SNRboth<-ggplot(SNRden,
aes(x = SNRBinNumeric,y = detected, shape=Run, color=Run)) +
geom_point(size=2)+
theme_bw()+
#stat_smooth(span = .8)+
scale_color_manual(values = wes_palette("Royal1", 2))+
ylab('Proportion Detected')+
xlab('SNR')
# Create the figure file
getwd()
install.packages("boxr")
library(boxr)
shiny::runApp('C:/BitBucketRepositories/FutureCurrentSpeeds')
c <- ggplot(mtcars, aes(qsec, wt))
c + stat_smooth()
c + stat_smooth() + geom_point()
# Adjust parameters
c + stat_smooth(se = FALSE) + geom_point()
c + stat_smooth(span = 0.9) + geom_point()
c + stat_smooth(level = 0.99) + geom_point()
c + stat_smooth(method = "lm") + geom_point()
library(splines)
library(MASS)
c + stat_smooth(method = "lm", formula = y ~ ns(x,3)) +
geom_point()
c + stat_smooth(method = rlm, formula= y ~ ns(x,3)) + geom_point()
# The default confidence band uses a transparent colour.
# This currently only works on a limited number of graphics devices
# (including Quartz, PDF, and Cairo) so you may need to set the
# fill colour to a opaque colour, as shown below
c + stat_smooth(fill = "grey50", size = 2, alpha = 1)
c + stat_smooth(fill = "blue", size = 2, alpha = 1)
# The colour of the line can be controlled with the colour aesthetic
c + stat_smooth(fill="blue", colour="darkblue", size=2)
c + stat_smooth(fill="blue", colour="darkblue", size=2, alpha = 0.2)
c + geom_point() +
stat_smooth(fill="blue", colour="darkblue", size=2, alpha = 0.2)
# Smoothers for subsets
c <- ggplot(mtcars, aes(y=wt, x=mpg)) + facet_grid(. ~ cyl)
c + stat_smooth(method=lm) + geom_point()
c + stat_smooth(method=lm, fullrange = TRUE) + geom_point()
# Geoms and stats are automatically split by aesthetics that are factors
c <- ggplot(mtcars, aes(y=wt, x=mpg, colour=factor(cyl)))
c + stat_smooth(method=lm) + geom_point()
c + stat_smooth(method=lm, aes(fill = factor(cyl))) + geom_point()
c + stat_smooth(method=lm, fullrange=TRUE, alpha = 0.1) + geom_point()
# Use qplot instead
qplot(qsec, wt, data=mtcars, geom=c("smooth", "point"))
# Example with logistic regression
data("kyphosis", package="rpart")
qplot(Age, Kyphosis, data=kyphosis)
qplot(Age, data=kyphosis, facets = . ~ Kyphosis, binwidth = 10)
qplot(Age, Kyphosis, data=kyphosis, position="jitter")
qplot(Age, Kyphosis, data=kyphosis, position=position_jitter(height=0.1))
qplot(Age, as.numeric(Kyphosis) - 1, data = kyphosis) +
stat_smooth(method="glm", family="binomial")
qplot(Age, as.numeric(Kyphosis) - 1, data=kyphosis) +
stat_smooth(method="glm", family="binomial", formula = y ~ ns(x, 2))
shiny::runApp('C:/BitBucketRepositories/FutureCurrentSpeeds/dataForDerek')
runApp('C:/BitBucketRepositories/FutureCurrentSpeeds/dataForDerek')
runApp('C:/BitBucketRepositories/FutureCurrentSpeeds/dataForDerek')
